#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <sys/shm.h>
#include <signal.h>
#include <time.h>
#define SHMKEY1 (key_t) 8821
#define PERM 0666
#define SHMKEY2 (key_t) 804
void up(int x,int num);
void down(int y,int num);


int main(int argc,char **argv){

struct timeval  first, second;
int N;
int lines;
pid_t pid,*pids;
char seira[120];
int shm_id1,shm_id2,sem_id,i,l,status;

int *count;
if(argc !=2){

printf("dwse swsta orismata \n");
	printf("dwse enan aritmo N \n");
	return -1;

}
	N=atoi(argv[1]);




typedef struct{			//to idio struct  pou eixame ston server
	int b;
	char line[120];
	int c;
	}grammi;
grammi *grammi2;

shm_id1=shmget (SHMKEY1,sizeof(grammi),PERM|IPC_CREAT);		//h mnhmh 1 me to idio key
	if(shm_id1==-1)
                printf ("erorr shared memory 1 \\n");
        else{
                printf ("\nshared memory1 succesfull\n");
                grammi2= shmat(shm_id1, (grammi*)0, 0);	
        }

shm_id2=shmget (SHMKEY2,sizeof(int),PERM|IPC_CREAT);			//edw kanoume shared memory gia na metrisoume tous Ci
	if(shm_id2==-1)
                printf ("erorr shared memory Ci count\n");
        else{
                printf ("\nshared memory Ci count succesfull\n");
                count= shmat(shm_id2, (int*)0, 0);	
        }
		*count=0;





union senum{
  int val;
  struct semid_ds *buff;
  unsigned short * array;
};


union senum arg0,arg1,arg2;


sem_id=semget(SHMKEY1,3,PERM | IPC_CREAT);		//dhmiourgia array of 3semaphores  meton idio tropo gia thn memory 1
	
	arg0.val=0;
	arg1.val=1;
	arg2.val=0;
	

	if (semctl(sem_id,0, SETVAL, arg0) <0) {			//
                perror("semctl");
                return -1;
        }
	if (semctl(sem_id,1, SETVAL, arg1) <0) {			//
                perror("semctl");
                return -1;
        }
	if (semctl(sem_id,2, SETVAL, arg2) <0) {			//--------semaphores' initialization
                perror("semctl");
                return -1;
    }




if ((pids=calloc((N+1),sizeof(pid_t)))==NULL ){				//tha perasoume ta pid se array
		perror("calloc");
		return -1;
	}

	for(i=0;i<N;i++){			//genoume N Ci diergasies 
	pid=fork();
	pids[i]=pid;
	if(!pid)			//ama einai paidi gia na ginoun N Ci me enan patera
	break;
	}
	
	if(!pid){	sleep(1);
			down(sem_id,1);			//kanoume down ton 2o shmaioforo gia na blockaristi amma paei na mpei allos Ci
			sleep(10);
			*count=*count+1;	
			if(*count==1)			//edw einai shmantiki perioxi douleuei mono mia diergasia Ci kai kaneis allos
			grammi2->c=N;
			printf("eimai to paidi %d \n",getpid());
			printf("please enter the line number you want ::::\n");
			scanf("%d",&grammi2->b);
						
   
			gettimeofday(&first, NULL);		//gia ton xrono antapokriseis
			
			
			up(sem_id,0);				//afou oloklirosh me thn mnhmh 1 kanei ksemplokari thn diergasia D
			down(sem_id,2);				//blockaroume ton C gia douleuei mono o D sthn mnhmh 1
			gettimeofday(&second, NULL);		
			
    			
			
			printf("%s \n and time responece %f \n",grammi2->line, (double) (second.tv_usec - first.tv_usec) / 1000000 + (double) (second.tv_sec - first.tv_sec));		//ektipwnoume thn grammi pou zitisame

			up(sem_id,1);		// kanoume up gia na mporei na mpei allh deirgasia
			
		sleep(1);



		
			
			

	}
	else if(pid!=0) {
	printf("eimai o pateras %d \n",getppid());
	for(l=0;l<N;l++){			//perimeni na teliwsoun ta paidia t
		pids[l]=wait(&status);
		if(pids[l]!=-1)
		printf("im procces %d and i finish \n",pids[l]);

			}
		free(pids);
		printf("teliwsameeeeeeee\n");

	// ----------shared memorys deleteee---------------------
	if ( shmctl(shm_id2,IPC_RMID,NULL) == -1  ){
               		perror("shmctl");
               		return -1;
        	}
	
	if ( shmctl(shm_id1,IPC_RMID,NULL) == -1  ){
               		perror("shmctl");
               		return -1;
        	}
		if ( shmdt(grammi2) == -1  ){
               		perror("shmdt");
               		return -1;
        	}
			if ( shmdt(count) == -1  ){
               		perror("shmdt");
               		return -1;
        	}
		//------------semaphores delete--------------------
		if ( semctl(sem_id,0, SETVAL,NULL) ==-1){			
                perror("semctl");
                	return -1;
		}

		if ( semctl(sem_id,1, SETVAL,NULL) ==-1){		
                perror("semctl");
                	return -1;
		}
		if ( semctl(sem_id,2, SETVAL,NULL)==-1) {			
		        perror("semctl");
		        return -1;
		}
	
		

		







}
}
void up(int x,int num){
  struct sembuf oper[1]={num,1,0};
  semop(x,&oper[0],1);
}

void down(int y,int num){
  struct sembuf oper[1]={num,-1,0};
  semop(y,&oper[0],1);
}
